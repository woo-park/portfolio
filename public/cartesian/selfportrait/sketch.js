let coordinate = [
    [348, 391, 355, 417, 411, 419, 430, 394],
    [431, 391, 345, 388, 346, 365, 424, 368],
    [427, 368, 434, 391, 497, 394, 488, 376],
    [341, 388, 279, 387, 290, 369, 342, 365],
    [273, 387, 239, 399, 257, 377, 283, 370],
    [502, 397, 518, 413, 511, 389, 494, 378],
    [231, 406, 219, 418, 242, 380, 252, 378],
    [515, 392, 522, 418, 530, 431, 524, 397],
    [345, 361, 423, 364, 419, 336, 347, 334],
    [418, 331, 348, 329, 348, 306, 418, 308],
    [341, 360, 292, 363, 305, 338, 342, 334],
    [343, 328, 308, 332, 318, 310, 342, 306],
    [485, 370, 427, 363, 423, 336, 475, 345],
    [473, 340, 422, 331, 424, 309, 460, 315],
    [284, 364, 259, 371, 278, 345, 297, 339],
    [301, 334, 282, 338, 301, 314, 312, 310],
    [508, 381, 491, 371, 482, 348, 491, 350],
    [489, 345, 478, 343, 466, 318, 477, 321],
    [523, 390, 513, 387, 498, 353, 505, 354],
    [502, 348, 493, 347, 484, 325, 490, 329],
    [254, 372, 245, 373, 260, 347, 274, 344],
    [277, 338, 263, 341, 282, 316, 295, 313],
    [359, 423, 369, 440, 390, 441, 406, 424],
    [372, 445, 389, 444, 392, 474, 376, 474],
    [376, 478, 392, 478, 391, 501, 375, 502],
    [376, 506, 376, 529, 396, 527, 391, 505],
    [376, 533, 373, 541, 398, 541, 396, 531],
    [372, 544, 369, 551, 400, 550, 398, 545],
    [371, 555, 379, 564, 393, 566, 400, 554],
    [392, 444, 395, 474, 396, 473, 394, 443],
    [394, 478, 393, 502, 395, 501, 396, 477],
    [394, 505, 397, 526, 400, 525, 396, 505],
    [401, 523, 397, 504, 401, 503, 403, 522],
    [400, 500, 397, 500, 398, 477, 401, 477],
    [401, 472, 397, 472, 396, 442, 399, 443],
    [370, 446, 366, 446, 370, 475, 373, 474],
    [370, 478, 373, 478, 372, 501, 368, 502],
    [368, 506, 369, 527, 372, 528, 372, 505],
    [367, 526, 360, 523, 361, 507, 366, 505],
    [365, 502, 361, 503, 364, 481, 368, 479],
    [368, 475, 364, 477, 363, 449, 364, 448],
    [373, 533, 360, 527, 356, 531, 370, 540],
    [370, 543, 365, 553, 353, 536, 355, 533],
    [360, 553, 352, 539, 345, 539, 345, 554],
    [343, 554, 341, 541, 337, 552, 337, 556],
    [363, 555, 362, 562, 351, 562, 347, 556],
    [346, 557, 337, 558, 335, 564, 348, 565],
    [347, 567, 336, 568, 339, 576, 350, 571],
    [351, 573, 342, 578, 352, 582, 354, 574],
    [358, 574, 355, 581, 368, 579, 359, 574],
    [366, 574, 375, 578, 383, 576, 375, 572],
    [386, 576, 397, 572, 406, 575, 394, 578],
    [384, 573, 378, 570, 381, 567, 391, 569],
    [377, 565, 367, 556, 364, 562, 375, 569],
    [395, 568, 403, 555, 409, 561, 396, 570],
    [409, 576, 400, 579, 414, 582, 420, 575],
    [418, 582, 425, 573, 436, 573, 431, 580],
    [437, 570, 422, 571, 417, 564, 435, 561],
    [406, 553, 411, 560, 417, 560, 434, 558],
    [401, 541, 407, 550, 417, 540, 415, 537],
    [398, 530, 399, 537, 413, 535, 411, 529],
    [419, 542, 411, 550, 423, 553, 428, 546],
    [430, 547, 427, 552, 434, 554, 435, 551],
    [410, 526, 406, 521, 398, 526, 400, 527],
    [406, 519, 404, 519, 402, 502, 403, 502],
    [367, 442, 359, 427, 359, 429, 365, 443],
    [363, 445, 358, 433, 361, 447, 362, 445],
    [393, 439, 408, 424, 408, 427, 395, 440],
    [397, 440, 407, 430, 407, 430, 399, 440],
    [436, 560, 437, 567, 440, 560, 439, 559],
    [438, 556, 434, 554, 436, 551, 438, 553],
    [377, 583, 374, 608, 386, 613, 383, 582],
    [386, 582, 389, 612, 398, 608, 398, 582],
    [401, 607, 401, 582, 410, 585, 412, 613],
    [370, 608, 373, 584, 366, 585, 358, 617],
    [354, 620, 362, 586, 354, 587, 342, 628],
    [415, 616, 414, 588, 421, 585, 425, 624],
    [429, 627, 425, 586, 432, 584, 438, 632],
    [338, 630, 349, 587, 339, 589, 328, 636],
    [335, 588, 322, 593, 294, 647, 321, 638],
    [271, 609, 282, 636, 289, 642, 317, 594],
    [268, 611, 228, 630, 253, 674, 284, 645],
    [225, 628, 208, 581, 252, 569, 266, 606],
    [207, 578, 200, 538, 236, 529, 249, 565],
    [201, 535, 198, 496, 227, 491, 233, 526],
    [198, 491, 203, 466, 225, 464, 225, 487],
    [202, 462, 210, 437, 229, 434, 225, 459],
    [257, 568, 269, 604, 288, 598, 272, 564],
    [269, 560, 253, 563, 239, 528, 260, 523],
    [259, 518, 237, 523, 232, 489, 250, 487],
    [247, 483, 231, 485, 230, 466, 242, 470],
    [242, 465, 230, 459, 256, 446, 262, 451],
    [261, 445, 265, 449, 281, 444, 280, 439],
    [286, 439, 285, 444, 303, 445, 304, 441],
    [308, 441, 307, 445, 320, 449, 323, 445],
    [327, 447, 323, 451, 330, 456, 333, 454],
    [336, 457, 332, 459, 337, 466, 341, 466],
    [229, 456, 255, 443, 254, 426, 234, 432],
    [259, 441, 281, 436, 280, 419, 257, 423],
    [286, 436, 305, 437, 307, 419, 284, 418],

    [306, 437, 322, 442, 327, 427, 311, 421],
    [325, 444, 333, 450, 336, 442, 329, 430],
    [335, 454, 340, 462, 342, 456, 338, 445],
    [246, 468, 254, 488, 284, 482, 286, 477],
    [290, 477, 289, 483, 330, 482, 333, 470],
    [336, 472, 335, 480, 340, 479, 342, 470],
    [254, 492, 262, 517, 284, 512, 286, 485],
    [261, 522, 273, 559, 289, 552, 284, 517],
    [275, 564, 290, 595, 304, 594, 290, 556],
    [290, 485, 288, 510, 330, 499, 329, 486],
    [288, 516, 293, 548, 327, 532, 328, 507],
    [295, 554, 309, 591, 333, 583, 328, 540],
    [333, 508, 330, 529, 352, 522, 354, 503],
    [357, 499, 333, 498, 333, 487, 356, 484],
    [345, 469, 344, 478, 350, 477, 350, 470],
    [352, 470, 353, 476, 358, 476, 357, 471],
    [357, 468, 351, 466, 355, 451, 359, 451],
    [348, 465, 344, 464, 348, 451, 351, 451],
    [357, 447, 352, 447, 351, 430, 354, 429],
    [348, 446, 344, 446, 343, 429, 347, 429],
    [339, 440, 334, 431, 336, 420, 340, 422],
    [330, 424, 316, 419, 317, 412, 331, 417],
    [312, 417, 293, 415, 294, 409, 311, 410],
    [289, 414, 270, 417, 269, 411, 289, 409],
    [266, 418, 249, 422, 248, 418, 263, 413],
    [246, 424, 235, 429, 231, 428, 244, 420],
    [405, 482, 407, 496, 424, 492, 426, 479],
    [427, 499, 429, 523, 413, 517, 408, 503],
    [433, 541, 432, 527, 415, 523, 418, 533],
    [538, 481, 543, 527, 514, 521, 510, 488],
    [544, 534, 540, 570, 511, 550, 514, 526],
    [538, 577, 531, 608, 504, 588, 510, 555],
    [529, 614, 513, 649, 488, 626, 502, 595],
    [510, 655, 489, 680, 469, 654, 486, 635],
    [485, 685, 459, 712, 443, 681, 465, 659],
    [455, 718, 424, 736, 412, 705, 440, 685],
    [419, 740, 387, 743, 390, 713, 409, 708],
    [382, 742, 360, 742, 366, 711, 386, 712],
    [355, 741, 326, 730, 344, 703, 361, 710],
    [321, 726, 294, 711, 314, 689, 338, 701],
    [289, 707, 260, 682, 289, 652, 310, 684],
    [433, 477, 431, 491, 474, 495, 475, 488],
    [480, 484, 479, 493, 509, 484, 511, 473],
    [516, 470, 513, 480, 537, 475, 537, 466],
    [480, 497, 483, 517, 512, 521, 506, 491],
    [510, 526, 507, 548, 484, 535, 483, 521],
    [508, 553, 502, 586, 483, 567, 484, 540],
    [498, 593, 486, 622, 469, 612, 482, 572],
    [483, 630, 468, 650, 456, 642, 468, 614],
    [315, 681, 298, 654, 323, 647, 335, 661],
    [318, 685, 339, 696, 349, 676, 338, 665],
    [344, 698, 362, 705, 366, 681, 355, 677],
    [368, 706, 385, 706, 387, 681, 372, 681],
    [390, 707, 409, 702, 404, 678, 389, 679],
    [413, 697, 438, 681, 429, 665, 409, 676],
    [443, 675, 462, 658, 450, 646, 434, 661],
    [450, 628, 443, 630, 435, 583, 441, 582],
    [452, 624, 463, 615, 449, 580, 443, 581],
    [465, 608, 477, 572, 455, 568, 452, 575],
    [478, 566, 480, 539, 456, 542, 456, 563],
    [478, 533, 475, 499, 451, 499, 456, 538],
    [450, 522, 435, 520, 431, 500, 446, 499],
    [453, 549, 438, 542, 436, 527, 449, 527],
    [451, 564, 440, 554, 440, 545, 451, 551],
    [451, 569, 448, 576, 440, 565, 442, 561],
    [534, 462, 533, 441, 515, 441, 514, 465],
    [510, 457, 499, 446, 501, 429, 512, 437],
    [495, 443, 485, 441, 488, 422, 495, 425],
    [481, 440, 467, 440, 467, 423, 485, 420],
    [463, 440, 452, 444, 452, 429, 463, 424],
    [449, 446, 436, 452, 435, 439, 447, 432],
    [432, 454, 428, 457, 428, 443, 432, 441],
    [427, 423, 426, 436, 431, 435, 432, 422],
    [435, 421, 434, 433, 438, 432, 438, 419],
    [441, 420, 441, 428, 443, 427, 445, 415],
    [447, 415, 445, 425, 452, 425, 455, 411],
    [459, 412, 457, 420, 464, 419, 466, 412],
    [469, 414, 468, 418, 481, 417, 482, 415],
    [503, 426, 503, 429, 513, 433, 514, 427],
    [515, 429, 516, 436, 526, 436, 525, 432],
    [497, 423, 488, 420, 487, 417, 498, 421],
    [405, 469, 405, 474, 408, 474, 407, 469],
    [411, 470, 410, 474, 415, 474, 415, 470],
    [419, 470, 418, 474, 427, 474, 426, 470],
    [427, 467, 418, 467, 419, 462, 428, 462],
    [415, 466, 409, 466, 410, 462, 416, 462],
    [406, 466, 403, 466, 403, 463, 407, 463],
    [406, 459, 401, 458, 402, 443, 406, 443],
    [411, 458, 415, 459, 414, 440, 411, 442],
    [419, 458, 422, 458, 423, 440, 419, 440],
    [421, 435, 422, 422, 419, 423, 417, 435],
    [413, 437, 415, 425, 411, 426, 409, 438],
    [406, 438, 407, 434, 404, 438, 402, 439],
    [373, 616, 374, 635, 382, 637, 384, 621],
    [387, 621, 387, 638, 400, 636, 401, 616],
    [404, 616, 404, 633, 413, 634, 412, 620],
    [415, 623, 416, 633, 425, 635, 425, 629],
    [428, 632, 428, 635, 440, 636, 437, 634],
    [370, 636, 370, 618, 362, 621, 361, 637],
    [355, 637, 356, 624, 351, 629, 349, 637],

    [343, 638, 346, 632, 337, 636, 336, 639],
    [332, 639, 332, 637, 328, 640, 327, 643],
    [373, 644, 384, 644, 384, 674, 372, 677],
    [370, 643, 363, 644, 361, 671, 367, 674],
    [360, 645, 354, 645, 350, 668, 357, 671],
    [351, 646, 344, 645, 342, 661, 345, 665],
    [341, 645, 335, 645, 335, 654, 339, 658],
    [332, 644, 328, 644, 330, 650, 328, 648],
    [388, 673, 388, 644, 399, 642, 400, 670],
    [407, 669, 405, 643, 415, 641, 416, 667],
    [421, 665, 419, 642, 425, 641, 426, 659],
    [431, 658, 429, 642, 435, 641, 435, 655],
    [439, 650, 440, 639, 445, 638, 444, 645],
    [447, 643, 448, 638, 453, 637, 449, 641],
    [255, 398, 255, 401, 279, 401, 278, 397],
    [282, 397, 282, 401, 302, 402, 303, 397],
    [306, 398, 306, 402, 327, 403, 327, 398],
    [331, 398, 331, 403, 345, 403, 344, 399],
    [341, 395, 328, 390, 315, 389, 324, 394],
    [317, 394, 311, 390, 297, 390, 302, 393],
    [296, 393, 292, 390, 281, 390, 285, 394],
    [278, 393, 274, 391, 266, 391, 262, 394],
    [347, 406, 347, 411, 331, 410, 330, 406],
    [327, 406, 327, 409, 308, 407, 308, 405],
    [303, 407, 284, 407, 283, 404, 303, 405],
    [279, 407, 277, 403, 250, 404, 249, 409],
    [258, 411, 240, 412, 240, 416, 248, 415],
    [240, 418, 227, 419, 226, 422, 237, 422],
    [237, 411, 228, 412, 228, 417, 238, 416],
    [249, 405, 234, 406, 233, 410, 248, 407],
    [253, 398, 246, 399, 241, 402, 252, 401],
    [225, 426, 216, 426, 214, 433, 225, 433],
    [427, 401, 427, 406, 451, 406, 452, 401],
    [434, 397, 434, 399, 455, 399, 455, 395],
    [458, 395, 459, 398, 481, 399, 481, 396],
    [453, 401, 452, 405, 469, 404, 470, 400],
    [473, 401, 473, 404, 491, 405, 490, 402],
    [484, 397, 484, 399, 499, 400, 498, 398],
    [494, 403, 494, 405, 506, 405, 505, 403],
    [427, 410, 427, 412, 444, 412, 443, 409],
    [448, 408, 448, 410, 455, 409, 455, 407],
    [458, 407, 458, 409, 469, 408, 469, 407],
    [472, 407, 472, 409, 486, 409, 486, 408],
    [490, 408, 490, 410, 498, 410, 501, 409],
    [505, 410, 504, 411, 515, 411, 514, 410],
    [490, 413, 490, 415, 501, 414, 502, 413],
    [505, 413, 505, 415, 513, 415, 513, 414],
    [498, 415, 498, 418, 506, 417, 507, 416],
    [509, 417, 508, 419, 513, 419, 515, 417],
    [502, 420, 502, 422, 508, 422, 509, 420],
    [515, 420, 513, 423, 520, 423, 520, 422],
    [517, 425, 517, 426, 521, 426, 522, 424],
    [418, 414, 419, 416, 435, 416, 435, 414],
    [418, 410, 419, 411, 424, 412, 424, 409],
    [417, 417, 416, 419, 431, 418, 431, 416],
    [333, 412, 334, 415, 348, 415, 348, 412],
    [342, 417, 348, 418, 353, 416, 346, 416],
    [345, 298, 346, 282, 320, 282, 320, 303],
    [311, 305, 316, 286, 311, 286, 305, 304],
    [301, 304, 307, 288, 294, 297, 284, 310],
    [351, 284, 350, 301, 391, 300, 387, 293],
    [394, 294, 395, 299, 417, 302, 421, 286],
    [426, 286, 422, 303, 457, 307, 457, 302],
    [463, 306, 463, 312, 473, 313, 471, 308],
    [433, 459, 433, 461, 447, 456, 446, 453],

    [450, 454, 464, 452, 465, 448, 451, 451],

    [469, 450, 478, 451, 479, 449, 470, 448],
    [482, 452, 491, 456, 494, 452, 484, 449],
    [494, 457, 503, 463, 505, 460, 497, 453],
    [507, 462, 505, 466, 510, 470, 512, 468],
    [538, 587, 544, 559, 550, 558, 550, 575],
    [549, 555, 543, 555, 546, 541, 551, 540],
    [204, 586, 199, 587, 195, 557, 199, 555],
    [195, 588, 180, 584, 175, 566, 193, 567],
    [191, 563, 190, 550, 173, 548, 174, 561],
    [198, 552, 195, 533, 191, 534, 193, 553],
    [241, 672, 247, 672, 248, 692, 245, 695],
    [246, 700, 248, 697, 249, 717, 247, 715],
    [250, 679, 251, 721, 272, 735, 266, 695],
    [270, 700, 275, 740, 296, 747, 290, 715],
    [294, 719, 301, 754, 327, 765, 324, 735],
    [327, 738, 356, 748, 363, 777, 330, 769],
    [360, 750, 391, 750, 393, 783, 367, 779],
    [396, 751, 423, 746, 421, 783, 397, 784],
    [428, 744, 453, 727, 449, 778, 427, 783],
    [459, 721, 476, 708, 469, 759, 452, 772],
    [480, 704, 489, 695, 483, 741, 477, 747],
    [298, 460, 295, 470, 304, 468, 304, 468],
    [307, 467, 300, 460, 311, 459, 311, 460],
    [300, 458, 300, 458, 312, 457, 305, 450],
    [298, 458, 298, 458, 302, 450, 293, 449],
    [297, 459, 297, 459, 291, 450, 285, 458],
    [297, 460, 297, 460, 285, 461, 292, 469],
    [461, 463, 461, 463, 455, 471, 465, 472],
    [462, 463, 462, 463, 466, 472, 474, 465],
    [463, 462, 463, 462, 475, 463, 472, 454],
    [462, 462, 462, 462, 469, 454, 460, 455],
    [461, 462, 461, 462, 458, 456, 449, 459],
    [460, 463, 460, 463, 449, 461, 452, 471]

];

//sample here

// console.log(window.availWidth);
// console.log(window.windowHeight);

// let w = window.screen.width;
// let h = window.screen.height;

let w = 1000;
let h = 1000;
let point_color = 0;

let cx = [];
let cy = [];
let counter = 0;
let counting = 1;

let rect_toggle = false;
let line_toggle = false;
let tri_toggle = false;


let coords_array = [
    
];
let Plane = [];

let turnOff;


function preload() {
    img = loadImage('./photo.jpg');
}

/**********************             setup Class       **********************/
function setup() {
    createCanvas(w, h);
    frameRate(50);
    image(img, 0, 0, 1200, 1200);

    // fill(255, 153);
    for(let i = 0; i < h; i += 10) {
        for(let j = 0; j < w; j+= 10) {
                point_color = 0;
                stroke(point_color);
                // strokeWeight(10);
                point(i,j)
        }
    }

    
    //need another array
    // for(let i = 0; i < coords_array.length; i++) {
    //     let converted = coords_array.map(Number);
    //     console.log(converted);
    //     console.log(coords_array[i],'i');
    //     let string = coords_array[i].toString();
    //     console.log(string);
    //     console.log(parseInt(string),'parseint');
    //     console.log(typeof(string));
    //     // let splitted = string.split('');
    //     // console.log(splitted)

    //     Plane[i] = new PlaneDrawing(converted[i]);
    // }
    // Plane = new PlaneDrawing(coords_array[i]);
    let empty_string
    for(let i = 0; i < coordinate.length; i++) {
        // for(let j = 0; j < 8; j++) {
        // //     console.log(coordinate[i][j])
        // // }
        //     empty_string = '';
        // coordinate[0].forEach((item, index) => {
        //     // console.log(index)
        //     empty_string += item
        //     if(index < 7) {
        //         empty_string += ','
        //     }
            
        // })
        // console.log(coordinate[i], 'line on ' + i)
        
        Plane[i] = new PlaneDrawing(coordinate[i]);
    }
    // console.log(empty_string)
    // console.log(Plane)
    
    // console.log(coordinate);
    console.log('press S to download work \n press R to draw rect \n press L to draw line \n press T to draw triangle \n BUT make sure to turn OFF before switching!!')
}


/**********************                Perlin Noise          **********************/

let noise_color;
let perlin_noise = 0.0;
let perlin = () => {
    perlin_noise = perlin_noise + .01;
    noise_color = noise(perlin_noise) * 250;
    return noise_color;
}




/**********************                  Draw func on loop              **********************/
function draw() {
    turnOff = false;
    
    // Plane.displayRect(); // class method
    // Plane1.displayRect();
    // Plane2.displayRect();
    // for(let i = 0; i < coords_array.length; i++) {
    //     // console.log('hi')
    //     Plane[i].displayRect();
    // }
    
    if(turnOff == false) {
        // background(0)
        for(let i = 0; i < Plane.length; i++) {
            
            Plane[i].displayRect();
        }
    } else if(turnOff == true) {
    }

    Grid();
}
/**********************               For Grid                    **********************/


let Grid = () => {
    for(let i = 0; i < h; i += 10) {
        for(let j = 0; j < w; j+= 10) {
                
                    point_color = 'rgb(240)';
                    strokeWeight(noise_color/100);   
                    noStroke();
                    point(cx[counting],cy[counting])
                    counting++;
        }   
        counting = 0;
    }   
    perlin();
    // console.log(noise_color)

    fill(62, noise_color, 242, noise_color/2);
}

// console.log(Plane)

/**********************               For Display                    **********************/

class PlaneDrawing {

    constructor(arg){
        this.x1 = arg[0];
        this.x2 = arg[2];
        this.x3 = arg[4];
        this.x4 = arg[6];
        this.y1 = arg[1];
        this.y2 = arg[3];
        this.y3 = arg[5];
        this.y4 = arg[7];
    }
    // constructor(x1,y1,x2,y2,x3 = 'null',y3 = 'null',x4 = 'null',y4 = 'null') {  //setting up default values
    //     this.x1 = x1;
    //     this.x2 = x2;
    //     this.x3 = x3;
    //     this.x4 = x4;
    //     this.y1 = y1;
    //     this.y2 = y2;
    //     this.y3 = y3;
    //     this.y4 = y4;
    // }

    // erase() {
    //     // for(let i = 0; i < 7; i++){
    //     //     this.arguments = null;
    //     // }
    //     // console.log(this.arguments)
        
    // }
    static erase() {
        turnOff = !turnOff;
        // background(255);
        // Grid();
        coordinate.forEach(item => {
            return item.forEach( (one) => {
                console.log(one,'one');
                return one += 1000
                
            })

        })
        console.log(coordinate)


    }

    show() {
        console.log(this.x1, this.y1, this.x2, this.y2, this.x3, this.y3, this.x4, this.y4);
    }
    displayRect() {
        beginShape();
        vertex(this.x1, this.y1);
        vertex(this.x2, this.y2);
        vertex(this.x3, this.y3);
        vertex(this.x4, this.y4);
        endShape(CLOSE);    
    }
    displayLine() {
        beginShape();
        vertex(this.x1, this.y1);
        vertex(this.x2, this.y2);
        endShape(CLOSE);
    }
    displayTri() {
        beginShape();
        vertex(this.x1, this.y1);
        vertex(this.x2, this.y2);
        vertex(this.x3, this.y3);
        endShape(CLOSE);    
    }
    
}


/**********************       For Drawing on the Cartesian plane            **********************/

let coords_triangle = [];

function drawTriangle(x1,y1,x2,y2,x3,y3) {
    let newarray = [];
    for(let i = 0; i < 6; i ++) {
        newarray.push(arguments[i]);   
    }
    coords_triangle.push(newarray);
    beginShape(TRIANGLES);
    vertex(x1, y1);
    vertex(x2, y2);
    vertex(x3, y3);
    endShape();
}

let coords_line = [];

function drawLine(x1,y1,x2,y2) {
    let newarray = [];
    for(let i = 0; i < 4; i ++) {
        newarray.push(arguments[i]);
    }
    coords_line.push(newarray);
    beginShape();
    vertex(x1, y1);
    vertex(x2, y2);
    endShape(CLOSE);  
}

let coords_rect = [];

function drawRect(x1,y1,x2,y2,x3,y3,x4,y4) {
    let newarray = [];
    for(let i = 0; i < 8; i++){
        newarray.push(arguments[i])
    }
    coords_rect.push(newarray);
    beginShape();
    vertex(x1, y1);
    vertex(x2, y2);
    vertex(x3, y3);
    vertex(x4, y4);
    endShape(CLOSE);    
}

let triangle = () => {
    for(let i = 0; i < mousePressedCounter + 1; i += 3) {
        if(cx.length % 3 == 0 && cx.length == i + 3) {
            fill(62, noise_color, 242, noise_color+50);
            drawTriangle(cx[0+i],cy[0+i],cx[1+i],cy[1+i],cx[2+i],cy[2+i]);
        }
    }
}

let line = () => {
    for(let i = 0; i < mousePressedCounter + 1; i += 2) {  
        if(cx.length % 2 == 0 && cx.length == i + 2) {      //no fill bc line
            drawLine(cx[0+i],cy[0+i],cx[1+i],cy[1+i]);
        }
    }
}

let rect = () => {
    for(let i = 0; i < mousePressedCounter+1; i += 4){
        if(cx.length % 4 == 0 && cx.length == i + 4){
            fill(62, noise_color, 242, noise_color+50);
            drawRect(cx[0+i],cy[0+i],cx[1+i],cy[1+i],cx[2+i],cy[2+i],cx[3+i],cy[3+i]);
        }
    }
}


/**********************       Mouse pressed triggers rect,tri,line func        **********************/


let mousePressedCounter = 0;
function mousePressed(event) {

    if(event.returnValue == true){
        mousePressedCounter += 1;
    }

    // strokeCap(ROUND);
    // rectMode(CORNERS);

    cx[counter] = event.pageX;
    cy[counter] = event.pageY;
    // console.log(cx[counter],cy[counter],`cx[${counter}],cy[${counter}]`)
    counter += 1;

    if(rect_toggle == true) {
        rect();
    }
    if(line_toggle == true) {
        line();
    }
    if(tri_toggle == true) {
        triangle();
    }
}


/**********************       For console && diff modes           **********************/

function keyPressed(){
    if (key == 'S' || key == 's') {
      save("masterpiece.png")
    }
    if (key == 'R' || key == 'r') {
        rect_toggle = !rect_toggle; 
        if(rect_toggle) {
            console.log('rect mode on!')
        } else if (!rect_toggle){
            console.log('rect mode off!')
        }
        
    }
    if (key == 'T' || key == 't') {
        tri_toggle = !tri_toggle; 
        if(tri_toggle) {
            console.log('tri mode on!')
        } else if (!tri_toggle){
            console.log('tri mode off!')
        }
        
    }
    if (key == 'L' || key == 'l') {
        line_toggle = !line_toggle; 
        if(line_toggle) {
            console.log('line mode on!')
        } else if (!line_toggle){
            console.log('line mode off!')
        }
    }
    if (key == 'C' || key == 'c') {
        console.log(counter,'counter number!')
        console.log(coords_rect,'looped thru array!');
        // console.log(coords_rect[0],'type')
    }

    if (key == 'E' || key == 'e') {         // need to do better job here
        console.log(turnOff,'e for erase!')
        // for(let i = 0; i < Plane.length; i ++){
        //     Plane[i].erase();
        // }
        PlaneDrawing.erase();
        // background(255);
    }
}








//cx[0], cy[0], cx[1], cy[1], cx[2], cy[2], cx[3], cy[3]

// function parseString(arg){
//     // console.log(arguments[0]);
//     // para = arguments[0];
//     // para.split('');

//     // console.log(para);
//     // // para.replace(' ', ',')
    

//     // console.log(typeof(para),'this is argument');
// }
// console.log(para,'para splitted');
// need a function
// takes console log coords as input