{"version":3,"sources":["components/assets/logo.png","components/assets/alt-tag-example.png","components/About/index.js","components/Nav/index.js","components/Gallery/index.js","components/Context/index.js","components/AddToState/index.js","components/Myobject/Item/index.js","components/Myobject/index.js","components/Artwork/index.js","components/Mywork/index.js","components/P5Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","id","Nav","navStyle","color","style","to","src","image","width","Gallery","props","useEffect","fetchIds","useState","theArray","setTheArray","ids","search","setSearch","a","fetch","data","json","idNumber","objectIDs","i","push","fetchItem","forEach","each","items","console","log","oldArray","img","primaryImageSmall","uuid","objectID","alt","tags","title","period","artist","artistDisplayName","medium","onSubmit","e","preventDefault","document","getElementById","textContent","type","name","value","onChange","target","placeholder","map","index","key","StateContext","createContext","StateProvider","state","setState","then","response","result","preState","Provider","children","AddToState","useContext","setName","description","setDescription","method","action","last","pop","altpost","primaryImage","axios","post","res","success","previousState","catch","error","Item","Mystate","length","Artwork","match","item","setItem","parseInt","params","artistNationality","objectDate","objectName","Myobject","sketch","p","img1","myLogo","windowResized","resizeCanvas","windowWidth","displayHeight","setup","createCanvas","loadImage","NoiseWalker","draw","background","display","move","x","y","this","xNoiseOffset","random","yNoiseOffset","fill","height","xMovement","noise","yMovement","Sketch","Home","example_image","App","exact","path","component","Mywork","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0930625b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cd312f1c.png\";","module.exports = __webpack_public_path__ + \"static/media/alt-tag-example.55204d64.png\";","import React from 'react';\n\nfunction About() {\n  return (\n    <div className=\"myComponent\">\n        <div id=\"about_page\" >\n            <div className=\"about_sections\">\n                <h1>About The Alt Tags</h1>\n                <h3>Open Access at The Met</h3>\n                <p>On February 7, 2017, The Met made all images of public-domain works in its collection available under Creative Commons Zero (CC0).</p>\n                <p>You now have more than 406,000 images of artworks from The Met collection to use, share, and remixâ€”without restriction. This policy change to Open Access is an important statement about The Met's commitment to increasing access to the collection in a digital age.</p>\n                <p><em>-From the Met-</em></p>\n            </div>\n\n            <div className=\"about_sections\">\n                <h3>What is ALT tag?</h3>\n                <h5>Alt tag is the first principle of web accessibility</h5>\n                <p>1. ALT tag is shorten term for alternative text. For many years, alt tags have been used for visually impaired users to understand the image.</p>\n                <p>2. Alt tags are also useful when the image cannot be loaded due to connection error or other reasons. In these cases, the alt tags are usually shown instead of the pictures.</p>\n\n                <p>3. Recently, alt tags have been kept short because they were used to enhance search engine optimization. But, that is not our interest at all. Our goal is to have better alt tags for visually impaired community who uses screen readers. With our detailed descriptions, we will not allow the community to understand better but also we will start new conversation with these artworks, bringing new perspectives.</p>\n\n\n            </div>\n        </div>\n    </div>\n\n  );\n}\n\nexport default About;\n\n/*\n\n<h3>Why is Alt Text Important?</h3>\n<p>1. Accessibility\nAlt text is a tenet of accessible web design. Its original (and still primary) purpose is to describe images to visitors who are unable to see them. This includes screen readers and browsers that block images, but it also includes users who are sight-impaired or otherwise unable to visually identify an image. Including alt text with your images ensures all users, regardless of visual ability, can appreciate the content on your site.</p>\n\n<p>\n2. Image SEO\nUsing alt text on your images can make for a better user experience, but it may also help earn you both explicit and implicit SEO benefits. Along with implementing image title and file naming   best practices, including alt text may also contribute to image SEO.\n</p>\n\n*/\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport image from '../assets/logo.png';\n\n\nfunction Nav() {\n\n  //colors\n  let brown = '#7B3E19';\n  let skin = '#B28B84';\n  let pink = '#F5E5FC';\n  let skyblue = '#8AE1FC';\n  let blue = '#48B8D0';\n\n  const navStyle = {\n    color: 'black'\n  }\n\n  const logoStyle = {\n    color: 'white'\n  }\n\n  return (\n    <div className=\"nav\">\n      <nav>\n        <ul className=\"nav-links\" >\n\n\n          <li ><Link style={navStyle} to=\"/\"><span className='glass'>Home</span></Link></li>\n\n\n\n          <li><Link style={navStyle} to=\"/about\"><span className='glass'>About</span></Link></li>\n\n\n          <li className ='nav_logo' ><Link style={logoStyle} to=\"/\"><img className = 'logo_img' src={image} width=\"110px\" /></Link></li>\n\n\n\n          <li><Link style={navStyle} to=\"/gallery\"><span className='glass'>Gallery</span></Link></li>\n\n\n\n          <li className ='nav_lastchild' ><Link style={navStyle} to=\"/mywork\"><span className='glass'>Completed</span></Link></li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n// we want to use state -> work with function component ->\nimport {useState, useEffect} from 'react';\n// import { useDispatch } from 'react-redux'\nimport {Link} from 'react-router-dom';\n\nimport uuid from 'react-uuid';\n\n//useEffect - when component mounts - fetch call\n//useState - holds the data retrieved from fetching\n\n// https://images.metmuseum.org/CRDImages/ep/web-large/DT1567.jpg\n\n//https://collectionapi.metmuseum.org/public/collection/v1/search?q=hasImages\n\n// https://collectionapi.metmuseum.org/public/collection/v1/search?q=ocean\n\n// https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=ocean\n\nfunction Gallery(props) {\n  // const dispatch = useDispatch();\n\n\n  useEffect( () => {\n    fetchIds()\n\n  }, []);  //[] run when component mounts\n\n  const [theArray, setTheArray] = useState([]); //datastorage\n\n  const ids = [];\n  // console.log(this.props);\n\n\n  let [search, setSearch] = useState('');\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const searchReady = (e) => {\n    e.preventDefault();\n\n    fetchIds()\n\n    // console.log(document.getElementById('message').textContent,'txt content')\n    document.getElementById('message').textContent = search\n    // console.log(search);  //setting done\n    //\n    setSearch('');\n\n  }\n\n  // search = '';\n  const fetchIds = async() => {\n\n    if (search === '') {\n        search = 'ocean'\n    }\n\n    // need to change the ocean part\n    const data = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${search}`);\n\n    // console.log(data);\n\n    const idNumber = await data.json();\n\n    // console.log(idNumber.objectIDs)\n    if(idNumber.objectIDs === null) {\n      return;\n    } else {\n      //push all ids - 280 or so\n      // idNumber.objectIDs.forEach((each)=>{\n      //   ids.push(each)\n      // })\n\n      //push just 20\n      for (let i = 0; i < 10; i ++) {\n        ids.push(idNumber.objectIDs[i])\n      }\n\n      fetchItem();  //after the ids are pushed\n    }\n  }\n\n  const fetchItem = async() => {\n    ids.forEach(async(each)=>{\n      const data = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${each}`);\n      const items = await data.json();\n\n      console.log('10 new retrieved artworks',items);\n      // console.log(items.primaryImageSmall);\n\n      setTheArray((oldArray) => [...oldArray, {\n        img:items.primaryImageSmall,\n        uuid:items.objectID,\n        alt:items.tags,\n        title:items.title,\n        period:items.period,\n        artist:items.artistDisplayName,\n        medium:items.medium\n      }]);\n      // console.log(items)\n    })\n\n\n  }\n\n  // let gall = document.querySelector('.gallery');\n  // console.log(gall);\n  //hmm\n\n  return (\n    <div className=\"myComponent\">\n\n        <div className='gallery'>\n\n            <form className='field_box' onSubmit = {searchReady}>\n                <h3>Welcome to the Met Museum Gallery!</h3>\n                <br/>\n                <legend>Search Images from Met Museum:</legend>\n                <input id=\"searchBox\" type='text' name='search' value={search}\n                onChange={updateSearch} placeholder='anything!'/>\n                <button>Submit</button>\n                <p id='message'></p>\n            </form>\n\n            {theArray.map((each, index) => (\n                <div  key ={uuid()} >\n                  <Link key = {uuid()} to={`/artwork/${each.uuid}`}>\n                    <img src={each.img} alt={each.alt}></img>\n                    <p>{each.img !== ''? '': 'image does not exist for this artwork or error'}</p>\n                    <div className='glass'>\n                      <p>{each.title} {each.artist ? `by ${each.artist}`: ''}</p>\n                      <p>{each.alt !== '' ? `alt TAGS! : ${each.alt}` : 'No alt tags on this artwork'}</p>\n                    </div>\n\n\n                  </Link>\n                </div>\n            ))}\n        </div>\n\n    </div>\n  );\n}\n\nexport default Gallery;\n","import React, {useState, useEffect, createContext} from 'react';\n\n// exporting 2 things here, so no default\n\n// creates our front db\nexport const StateContext = createContext();\n\n\n// component, so we have to return ()\nexport const StateProvider = (props) => {\n\n\n    const [state, setState] = useState([\n        ])\n\n    useEffect( () => {\n\n\n          // async function fetching (url) {\n          //   fecth(url)\n          //   .then((response)=>{\n          //     if(response != []){\n          //       return response.json()\n          //     }\n          //   })\n          // }\n\n          // let url = 'http://localhost:5555';\n          let url = 'https://wooyongpark.com'\n          fetch(`${url}/api/altpost`)\n            .then( (response) =>{\n              console.log('Where client state, and db just polled');\n              let result;\n              if(response != []) {\n                result = response.json();\n                console.log(result,'result here');\n\n              }\n              return result\n            })\n            // .then(data => {console.log(data,'nothin found?')})\n            .then(result=>{\n\n              result.forEach(each => {\n                console.log(each,'EACH')\n                setState((preState) => [...preState, each]  );\n                // setState((oldArray) => [...oldArray, each]);\n              })\n\n\n\n\n          })\n\n\n          // need to set to my state now -> ->\n\n          // fetch(`http://localhost:3001/api/gadgets?gadgetType=${this.state.filterVal}`)\n          //   .then(response => response.json())\n          //   .then(data => this.setState({gadgets: data}));\n          //\n          // setState( (previousState) => [...previousState, {\n          //   name: 'Empty',\n          //   artistDisplayName: 'item.artistDisplayName',\n          //   artistNationality: 'item.artistNationality',\n          //   objectDate: 'item.objectDate',\n          //   tags: 'item.tags',\n          //   medium: 'item.medium',\n          //   objectName: '',\n          //   primaryImage: '',\n          //   id: 'match.params.id'\n          // }] );     //okay set the state\n\n    }, []);  //[] run when component mounts\n    console.log(state,'when first begins')\n\n\n  return (\n    <StateContext.Provider value = {[state, setState]}>\n      {props.children}\n    </StateContext.Provider>\n  );\n}\n\n//passing down the [state] and [setstate method]\n// {\n//   name: 'Cold winter ocean',\n//   artistDisplayName: 'Oil painting',\n//   artistNationality: 'sample',\n//   objectDate: 'sample',\n//   medium: 'sample',\n//   description: 'sample',\n//   objectName: 'sample',\n//   primaryImage: 'sample',\n//   objectName: 'sample',\n//   id: 'sample',\n//   tags: 'sample'\n// }\n","import React, {useState, useContext} from 'react';\n\nimport {StateContext} from '../Context';\nimport axios from 'axios';\n\n//define the function   //export bottom\n// pull out [state] and [setState] from StateContext <= we imported\nconst AddToState = () => {\n  const [state, setState] = useContext(StateContext);\n\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const updateName = (e) => {\n    setName(e.target.value);\n  }\n\n  const updateDescription = (e) => {\n    setDescription(e.target.value);\n  }\n\n  // const addItem = (e) => {\n  //   e.preventDefault();\n  //   setState( (previousState) => [...previousState, {name:name, tags:description}]);\n  // }\n  const modifyItem = (e) => {\n    e.preventDefault();\n\n    let last = state.pop();   // return the last ele\n    last.name = name;         // assign new value\n    last.tags = description;\n    last.description = description;\n\n    // console.log(last,'last')\n    // last.objectName\n\n\n    console.log(name, description);\n    // const myUrl = 'http://localhost:5555'; //for testing locally\n    const myUrl = 'https://wooyongpark.com';\n\n\n    let altpost = {\n                    type: 'artwork',\n                    name: name,\n                    description: description,\n                    artistDisplayName: last.artistDisplayName,\n                    medium: last.medium,\n                    id: last.id,\n                    primaryImage: last.primaryImage\n                  }\n    axios.post(`${myUrl}/api/altpost`, altpost)\n      .then(res => console.log(res.data))\n      .then(success => {setState( (previousState) => [\n        ...previousState, last\n      ])\n      console.log(state,'state after adding')\n    }\n    )\n      .catch(function (error) {\n    console.log(error);\n    // document.querySelectorAll('input').value = ''\n  });\n\n\n\n\n\n\n    /*{\n\n    const url = 'http://localhost:8080/api/altpost';\n    const data = { name: last.name };\n\n    fetch(url, {\n      method: 'post',\n      body: JSON.stringify({name: 'jay', description: 'mydes'})\n    }).then(function(response) {\n      // console.log(response,'response')\n      console.log('hi')\n      // return response.json();\n\n    })\n\n    // no freaking idea\n    // form is not connected with whatever\n    // clientside - running in 3000\n    // server - running in 8080\n    // so cors? cross origin whatver?\n    // I get ping when submitting, but i get no contents back\n\n    // also i have to npm-run-build every time?\n    // i found npm-run-build makes clientside run on 8080? so tedious...\n\n\n    }*/\n\n\n\n\n  }\n\n  return (\n    <form method = 'POST' action = 'http://localhost:8080/api/altpost' className='field_box' onSubmit = {modifyItem} >\n      <div>\n        <label>Do you have a better title?</label>\n        <input type='text'\n                name='name'\n                value={name}\n                onChange={updateName}\n                placeholder=\"Text Title\"\n                id='textTitle'\n                />\n      </div>\n\n      <div>\n        <label>We need better Alt Tags!!</label>\n        <input type='text'\n                name='description'\n                value={description}\n                onChange={updateDescription}\n                placeholder=\"description\"\n                id='textBox'\n                />\n      </div>\n\n\n      <button>Submit</button>\n    </form>\n  )\n}\n\n\n//finally works\n\n    // setState( (previousState) => [previousState.slice(0, previousState.length - 1), {...state[state.length - 1], name: name }]);\n\n// setState( (previousState) => [previousState.slice(0, -1), {...previousState[previousState.length - 1], name: name }])\n\n\nexport default AddToState;\n","import React, {useState} from 'react';\n\nconst Item = (props) => {\n    console.log(props.each.tags,'tags alt!!!!!')\n  return(\n    <div>\n        <h3><span className='left_align'>Title</span> : {props.each.name}</h3>\n        <p><span className='left_align'>Alt Tags</span> : {props.each.tags}</p>\n        <p><span className='left_align'>description</span> : {props.each.description}</p>\n\n        <p><span className='left_align'>Object ID number(MET)</span> : {props.each.id}</p>\n        {/*<p>{props.each.artistDisplayName}</p>*/}\n        {/*<p>{props.each.artistNationality}</p>*/}\n        {/*<p>{props.each.objectDate}</p>*/}\n        {/*<p>{props.each.medium}</p>*/}\n        {/*<p>{props.each.objectName}</p>*/}\n        {/*<p>{props.each.primaryImage}</p>*/}\n        {/*<p>{props.each.objectName}</p>*/}\n\n\n    </div>\n  );\n}\n\nexport default Item;\n","import React, {useState, useContext} from 'react';\nimport {StateContext} from '../Context';             //useContext and {ListContext} is what's allowing to access the context - db\nimport Item from './Item';\nimport uuid from 'react-uuid';\n\n\nconst Mystate = () => {\n  const [state, setState] = useContext(StateContext);      // allows you to access the context - bc we have provider wrapped around in root\n\n\n  return(\n    <div className='imageText'>\n\n\n    {state.length > 0 ? <Item each = {state[state.length - 1]} key = {uuid()} /> : ''}\n    </div>\n  );\n}\n\nexport default Mystate;\n\n// previously <= but only sending the last one of the state\n// {state.map((each, index)=>(\n//   <Item each = {each} key = {uuid()} />\n// ))}\n\n\n// try build now -> react running in 3000, server on 8080, when build is done -> react also runs in 8080 -> from server, server the build folder -> pointing to index.html -> make sure 8080/api/altpost is working, and form post&get is posting and retrieving from 8080\n\n\n//simply passing in each , rather than each one props\n","import React from 'react';\n// we want to use state -> work with function component ->\nimport {useState, useEffect, useContext} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport AddToState from '../AddToState';\nimport Myobject from '../Myobject';\nimport uuid from 'react-uuid';\n\n//trying here\nimport {StateContext} from '../Context';  //also need to change the stateContext so\n\nfunction Artwork({match}) {    //we can use props calle d '{match}' bc we used <Link>\n\n  useEffect( () => {\n    fetchItem();\n\n  }, []);  //[] run when component mounts\n\n  const [state, setState] = useContext(StateContext);\n\n  const [item, setItem] = useState([]); //datastorage\n\n  const ids = [];\n\n  const fetchItem = async() => {\n    const data = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${parseInt(match.params.id)}`);\n\n    const item = await data.json();\n    // console.log(item)\n\n    setItem(item);\n\n    setState( (previousState) => [...previousState, {\n      name: item.title,\n      artistDisplayName: item.artistDisplayName,\n      artistNationality: item.artistNationality,\n      objectDate: item.objectDate,\n      tags: item.tags,\n      medium: item.medium,\n      objectName: item.objectName,\n      primaryImage: item.primaryImage,\n      id: match.params.id\n    }] );     //okay set the state\n\n  }\n  console.log(match,'match');\n  return (\n    <div className=\"myComponent\">\n      <h1>Artwork</h1>\n\n      <p className=\"paras\">The artwork you've chosen is called {item.title != '' ? `${item.title}. ` : 'Unknown'}\n\n      {item.artistDisplayName != '' ? `This was made by an artist (or artists) named ${item.artistDisplayName}. ` : 'The artist of this work is unknown. '}\n\n      {item.artistNationality != '' ? `The artist is from  ${item.artistNationality}. `: ''}\n\n      {item.objectDate != '' ? `It was created in (or around)  ${item.objectDate}. `: ''}\n\n      {item.medium != '' ? `Medium of this work is  ${item.medium}. `: ''}\n\n      {item.objectName != '' ? `Please take a close look at  ${item.objectName} and add (detailed) description to this artwork. `: ''}\n\n\n      </p>\n\n      <div className='imageContainer'>\n        <img src = {item.primaryImage} alt = {item.tags} className='largeImage'></img>\n        <Myobject key = {uuid()}/>\n        <AddToState key = {uuid()}/>\n\n      </div>\n    </div>\n  );\n}\n//tackle myobject -- > from there to\n// <Item each = {state.slice(-1)}  />\nexport default Artwork;\n\n    // <div class=\"field_box\">\n    //   <label for=\"name\">Title</label>\n    //   <input class=\"field_input\"\n    //           type=\"name\"\n    //           name=\"name\"\n    //           placeholder=\"Text Title\"\n    //           id='textTitle'\n    //\n    //           >\n    // </div>\n\n    //\n    // #textBox{\n    //   width:200px;\n    //   height:200px;\n    // }\n    // #textTitle{\n    //   width:200px;\n    //   height:100%;\n    // }\n    //\n    //\n    // .field_box {\n    //   display: flex\n    //   /* background-color: blue; */\n    // }\n    // .field_box label{\n    //   flex-basis: 20%;\n    //   /* background-color: blue; */\n    // }\n\n\n    // <h2>Title: {item.title != '' ? item.title : 'Unknown'}</h2>\n    // <h3>Artist: {item.artistDisplayName != '' ? item.artistDisplayName : 'Unknown'}</h3>\n    // <h5>{item.artistNationality != '' ? `Artist Nationality ${item.artistNationality}`: ''}</h5>\n    // <h5>{item.objectDate != '' ? `Date: ${item.objectDate}`: ''}</h5>\n    // <h5>{item.medium != '' ? `Medium: ${item.medium}`: ''}</h5>\n    // <h5>{item.objectName != '' ? `Object Name: ${item.objectName}`: ''}</h5>\n","import React, {useState, useContext, useEffect} from 'react';\n\nimport {StateContext} from '../Context';\nimport axios from 'axios';\n\nfunction About() {\n  //pulling out state\n  const [state, setState] = useContext(StateContext);\n\n\n\n  // console.warn(state,'state jhere')\n\n\n  return (\n    <div className=\"myComponent\">\n\n\n\n          <h1>My accomplishment</h1>\n          {state.map((each, index) => (\n              <div key = {index}>\n                  <img src={each.primaryImage}></img>\n                  <p>{each.name} {each.artistDisplayName !== '' ? `by ${each.artistDisplayName}`: ''}</p>\n                  <p>{each.description !== '' ? `Alt created by you and the community!`: ''}</p>\n                  <p>{each.description !== '' ? `${each.description}` : ''}\n                  </p>\n              </div>\n          ))}\n\n    </div>\n  );\n}\n\nexport default About;\n//use to have this up there, but unneccesary i guess, since state-context is pulling from api/altpost and updating the state\n\n// const [memory, setMemory] = useState([]);\n// useEffect( () => {\n//\n// let dbStorage = '';\n//\n//   axios.get('http://localhost:8080/api/altpost')\n//     .then(res => {\n//\n//       dbStorage = res.data\n//\n//       console.log(dbStorage,'retrived from dbstorage');\n//     })\n//     .catch(function (error) {\n//       console.log(error, 'err found fetching from api/altpost');\n//     });\n//\n// }, []);\n\n\n\n//passing down the [state] and [setstate method]\n// {\n//   name: 'Cold winter ocean',\n//   artistDisplayName: 'Oil painting',\n//   artistNationality: 'sample',\n//   objectDate: 'sample',\n//   medium: 'sample',\n//   description: 'sample',\n//   objectName: 'sample',\n//   primaryImage: 'sample',\n//   objectName: 'sample',\n//   id: 'sample',\n//   tags: 'sample'\n// }\n\n\n\n// <h1>Collective work!</h1>\n// <img src={dbStorage.primaryImage}></img>\n// <p>{dbStorage.name} {dbStorage.artistDisplayName != '' ? `by ${dbStorage.artistDisplayName}`: ''}</p>\n// <p>Alt created by you!</p>\n// <p>{dbStorage.tags}</p>\n","import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport p5 from \"p5\";\n\nfunction sketch(p){\n  let rotation = 0;\n  let img1;\n\n  let myLogo;\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.displayHeight);\n }\n  p.setup = function () {\n\n    // p.createCanvas(window.document.documentElement.clientWidth, window.document.documentElement.clientHeight);//p.WEBGL\n    p.createCanvas(p.windowWidth, p.displayHeight);\n    // alert(p.width)\n    img1 = p.loadImage('./logo.png')\n    // p.imageMode(p.CENTER)\n\n    myLogo = new NoiseWalker(100, 100);\n    console.log(myLogo)\n  };\n\n  p.draw = function () {\n    p.background(100);\n    // p.normalMaterial();\n    // p.noStroke();\n    // p.push();\n    // p.rotateY(rotation);\n    // // p.box(100);\n    // p.pop();\n    // p.image(img1,30,30,100,50);\n\n    myLogo.display();\n    myLogo.move()\n  };\n\n\n  // our NoiseWalker class\n  class NoiseWalker {\n\n    constructor(x, y) {\n      // store our position\n      this.x = x;\n      this.y = y;\n\n      // create a \"noise offset\" to keep track of our position in Perlin Noise space\n      this.xNoiseOffset = p.random(0,1000);\n      this.yNoiseOffset = p.random(1000,2000);\n    }\n\n    // display mechanics\n    display() {\n      p.fill(255);\n      // p.ellipse(this.x, this.y, 25, 25);\n      p.image(img1,this.x,this.y,100,50);\n      // console.log(p.width, p.height)\n\n\n      if(this.x > p.width) {\n        this.x = 0\n      }\n      if(this.x < 0) {\n        this.x = p.width\n      }\n      if (this.y > p.height) {\n        this.y = 0;\n      }\n      if(this.y < 0 ){\n        this.y = p.height\n      }\n    }\n\n    // movement mechanics\n    move() {\n      // compute how much we should move\n      var xMovement = p.map( p.noise(this.xNoiseOffset), 0, 1, -1, 1 );\n      var yMovement = p.map( p.noise(this.yNoiseOffset), 0, 1, -1, 1 );\n\n      // update our position\n      this.x += xMovement;\n      this.y += yMovement;\n\n      // update our noise offset values\n      this.xNoiseOffset += 0.01;\n      this.yNoiseOffset += 0.01;\n    }\n  }\n\n\n\n\n}\n\nfunction Sketch(p) {\n  return (\n    <div className='mySketch'>\n      <P5Wrapper sketch={sketch} />\n    </div>\n\n  );\n}\n\nexport default Sketch;\n","import React from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Nav from './components/Nav';\nimport Gallery from './components/Gallery';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n// renaming as router - bc of long name\nimport Artwork from './components/Artwork';\nimport Mywork from './components/Mywork';\n\nimport {StateProvider} from './components/Context';\nimport {StateContext} from './components/Context';\nimport example_image from './components/assets/alt-tag-example.png';\n\n\nimport Sketch from './components/P5Wrapper';\nfunction App() {\n\n\n  return (\n    <StateProvider>\n        <Router>\n            <div className=\"App\">\n\n                <Nav />\n                <Sketch />\n\n                <Switch>\n                    <Route exact path=\"/about\" component={About} />\n                    {/*anything that comes after won't work unless we have 'exact' keyword placed*/}\n\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/gallery\" component={Gallery} />\n\n                    <Route path=\"/artwork/:id\" component={Artwork} />\n\n                    <Route path=\"/mywork\" component={Mywork} />\n\n\n\n                </Switch>\n            </div>\n        </Router>\n    </StateProvider>\n  );\n}\n\n\nconst Home = () => (\n  <div className=\"myComponent\">\n    <h1>Welcome!</h1>\n\n    <div>\n        <p>The goal of this page is to make artworks more accessible to all. In the gallery, you have the access to the Met Gallery. You can look up any artworks that meet your interest. After finding artworks, you can start add description to the images. Your work will be saved, and the whole community will have the access to these descriptions, just like how you can check out other participants' contributions. Take a look at the completed to see community-generated alt tags.</p>\n    </div>\n\n    <h2>Here are some instructions on how to generate a good Alt tags</h2>\n\n    <div className='paras'>\n      <p>Be specific. Describe the artwork to yourself. </p>\n      <p>Some say that alt tags should be kept short. But, not here! It can be as long as you want.</p>\n      <p>Full sentence is better than keywords. But, keywords are still helpful as well. </p>\n      <p>\"image of\" and \"picture of\" in alt tags are not so helpful for the community. </p>\n    </div>\n\n    <img src={example_image} ></img>\n    <div className='paras'>\n      <p>Okay alt text: alt=\"man on escalator\"</p>\n      <p>Better alt text:  alt=\"man walking down a long escalator\"</p>\n      <p>Even better alt text:  alt=\"Asian man wearing a black backpack holds on to the rail and walks down the escalator. The person is on focus while others are blurred out.\"</p>\n    </div>\n\n  </div>\n)\n//this is returning a component not a function, so MUST USE ()\n\n\n/*\n// <MyComponent greeting = {true}>\n\nclass MyComponent extends React.Component {\n  render() {\n    return <h1>{this.props.greeting ? 'hiii' : 'bye' }bye</h1>\n  }\n}\nReactDOM.render(<div><MyComponent /><MyComponent greeting = {true}/></div>, document.getElementById('root'));\n\n// stat is data controlled wholly by the component wheras props is passed down from the renderer\n// changing state causes a re-rener of your component\n// to initialize state:\n// constructor(props) {\n// super(pros);\n// this.state = {prop, val}\n// }\n// to change state\n\n// do not do this => this.state.prop = newVal\n// this.setState({prop: newVal})\n// react may batch changes to state: updating state may be async\n\n// it paasses in previous state....\n// this.setState((state, props)=>({prop: newValBasedOnState}))    /hmmm\n\nclass Clicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({count: this.state.count + 1});\n  }\n  render() {\n    return(\n      // or remove the this.handleClick in constructor and place ()=>... in {}\n      <div onClick= {this.handleClick} className='clicker'>\n        {this.state.count}\n      </div>\n    );\n  }\n}\nReactDOM.render(<Clicker />, document.getElementById('root'));\n\nconst clickers = [0,1,2,3].map((each, i)=>(\n  return <Clicker key='i' start='each'>\n))\nReactDOM.render(clickers, document.getElementById('root'));\n\n// //styling\n// .clicker {\n//   width:3em;\n//   height:2em;\n//   font-size:2em;\n//   padding:1em;\n    // text-align:center;\n//   border:0.25em solid black\n// }\n\n\n//another way to make componenet\nfunction MyComponent(props) {\n  function handleClick() {\n    alert()\n  }\n  return <h1 onClick={handleClick}>Functional: {props.greeting ? 'hi':'bye'}</h1>\n\n\n}\n\n\n\n// create a class => which becomes  componenent\n// name it with CamelCase\n//extend React.Component\n// one method required ... render\n// rnder it dictates how to show / compose this component\nclass App extends React.Component {\n  render() {\n    return (<div>\n        <h1>Hello</h1>\n        <div>this is a componenet:{5 * 76}</div>\n      </div>)\n  }\n}\nReactDOM.render(<div><App /><App /></div>, document.body);\n\n// ReactDOM.render(<h1 className='foo'>this is my header</h1>, document.body);\n\n*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n//reducer and redux setup\n\n\nReactDOM.render(\n          <App />,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}