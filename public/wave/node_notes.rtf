{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12540\viewh16140\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 koa instead of express\
\
deploying to cloud\
google cloud\
aws\
microsoft edger\
\
been popular before\
heroku\
cloud offering mongo lab - being shutdown\
\
terminal -\
	ssh cims.nyu.edu -- something like that\
\
git remote -v\
git clone\
\
config,js - not on version control\
install forever - npm module that runs on the background - keeps running & restarting\
\
\
*auth\
	*username in plain text\
	*password as a hash(add salt to pw prior to hashing)\
		* algo currrently bycrypt\
		*but that could change\
		*computationaly expensive + collision resistant\
	*salt in plain text		-- it\'92s one way\
	*encryption 			-- its meant to be decripted\
	\
*ssl & tls\
	*cryptographic protocols\
	*encription for your http traffic\
	* ensures\
		* privacy of messages  - symmetric key encryption\
			* 1 (client requiests) agreeing on what protocls and versions to use\
			* 2 (server sends back) SSL certificate is sent from server\
			* 3 browser sees that it\'92s valid\
			* 4 exchange keys w/ asym encryption\
				* pair of keys: private and public\
				* to send encrypted messages: ...\
					* you send your public key to other person\
					* other person uses public key to encrypt\
					* you decrypt w/ your private key\
			* 5. all comms after are encrypted for the current conneciton\
		* identity of one of the parties\
		* message has not been tampered w/\
		}